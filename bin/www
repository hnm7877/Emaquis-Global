#!/usr/bin/env node

/**
 * Module dependencies.
 */

var Server = require('../app');
var debug = require('debug')('eagle:server');
var http = require('http');
const { userQueries } = require('../requests/UserQueries');
const { employeQueries } = require('../requests/EmployeQueries');
const { categorieQueries } = require('../requests/categorieQueries');
const { fournisseurQueries } = require('../requests/fournisseurQueries');
const { produitQueries } = require('../requests/produitQueries');
const { venteQueries } = require("../requests/venteQueries")
const User = require('../models/user.model');
const dotenv = require('dotenv').config();
var bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const swaggerUi = require('swagger-ui-express'),
  swaggerDocument = require('../swagger.json');

const FileUpload = require('../utils/fileupload');

const db = require('../settings/database');
const { all } = require('../routes/index');

/**
 * Get port from environment and store in Express.
 */
const Serveur = new Server();
const app = Serveur.getApp();
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io').listen(server);

app.io = io;
/**
 * Listen on provided port, on all network interfaces.
 */
db();

const SaveUSer = io.of('/inscription').use(Serveur.getSharedSession());
SaveUSer.on('connection', (socket) => {
  socket.on('setUser', async (data) => {
    const Result = await userQueries.setUser(data);
    if (Result.etat == false) {
      socket.emit('bad');
    } else {
      if (Result !== null) {
        socket.emit('saved');
        socket.emit('loginsuccess', '/dashboard');
      }
    }
  });
});

//connexion admin
const UserLogin = io.of('/connexion').use(Serveur.getSharedSession());
UserLogin.on('connection', (socket) => {
  console.log('connexion utilisateur');
  try {
    socket.on('login', async (data) => {
      const { email, password } = data;
      if (!(email && password)) {
        console.log('veuillez remplir tous les champs');
      }
      //   const Result = await userQueries.getUser(data);
      const userlogin = await User.findOne({ email });
      console.log(userlogin, 'userlogin');

      if (userlogin && (await bcrypt.compare(password, userlogin.password))) {
        const token = jwt.sign(
          { user_id: userlogin._id, email, isAdmin: userlogin.isAdmin },
          process.env.SECRET,
          {
            expiresIn: '1h',
          }
        );

        userlogin.token = token;
        socket.handshake.session.user = {
          id: userlogin._id,
          username: userlogin.username,
          nom_etablissement: userlogin.nom_etablissement,
          isAdmin: userlogin.isAdmin,
          ...userlogin._doc,
        };
        socket.handshake.session.save();
        socket.emit('loginsuccess', '/dashboard');
        console.log(socket.handshake.session);
        console.log({ token: token });
      } else {
        socket.emit('bad');
      }
    });
  } catch (e) {
    console.log(e);
  }
});

const SaveEmploye = io.of('/ajouteruser').use(Serveur.getSharedSession());
SaveEmploye.on('connection', (socket) => {
  socket.on('setemploye', async (data) => {
    console.log(data);
    const Result = await employeQueries.setEmploye(data);
    console.log(Result);
    if (Result) {
      socket.emit('saved');
    } else {
      socket.emit('bad');
    }
  });
});

const updateEmploye = io.of('/edituser').use(Serveur.getSharedSession());

updateEmploye.on('connection', (socket) => {
  socket.on('updateEmploye', async (data) => {
    const Result = await employeQueries.updateEmploye(data.userId, data.data);
    console.log('ðŸ‘‰ ðŸ‘‰ ðŸ‘‰  ~ file: www:126 ~ Result', Result);
    if (Result.etat) {
      socket.emit('saved', {
        update: true,
      });
    } else {
      socket.emit('bad');
    }
  });
});

const SaveCategorie = io
  .of('/ajoutercategorie')
  .use(Serveur.getSharedSession());
SaveCategorie.on('connection', (socket) => {
  socket.on('setcategorie', async (data) => {
    console.log('ðŸ‘‰ ðŸ‘‰ ðŸ‘‰  ~ file: www:145 ~ data', data);
    const Result = await categorieQueries.setCategorie(data);
    console.log(Result);
    if (Result.result !== null) {
      socket.emit('saved');
    } else {
      socket.emit('bad');
    }
  });
});

const SaveFournisseur = io.of('/fournisseur').use(Serveur.getSharedSession());
SaveFournisseur.on('connection', (socket) => {
  socket.on('setfournisseur', async (data) => {
    const Result = await fournisseurQueries.setFournisseur(data);
    console.log(Result);
    if (Result.result !== null) {
      socket.emit('saved');
    } else {
      socket.emit('bad');
    
   
} 

  });
});


const Summary = io.of('/summary').use(Serveur.getSharedSession());
Summary.on('connection', (socket) => {
  socket.on('selected_month_year', async (data) => {
    console.log(data,'okokokdsdsdsdsdsdsdsdsdsdsdssdsd');
    const moment = require('moment');
    console.log(data.date+"-01")
     const startOfMonth = moment(data.date+"-01").startOf('month');
     const Result = await venteQueries.getVentes({ travail_pour:data._id  ,createdAt: { $gte: startOfMonth.toDate() } });
     console.log(Result);
    if (Result) {
      const beneficeParBouteille = 5;
      let totalPrix = 0;
      const bouteillesVendues = {};
      const semaineVentes = {};
      let totalBenefice = 0;
      
      Result.result.forEach((vente) => {
        // Calculer le prix total de la vente
        const prixTotal = vente.prix;
        totalPrix += prixTotal;
      
        vente.produit.forEach((produit, i) => {
          // Calculer le nombre total de bouteilles vendues
          const quantiteVendue = vente.quantite[i];
          if (!bouteillesVendues[produit]) {
            bouteillesVendues[produit] = 0;
          }
          bouteillesVendues[produit] += quantiteVendue;
          
            // Diviser les ventes en fonction des semaines
            const dateVente = new Date(vente.createdAt);
            const jourVente = dateVente.getDate();
            console.log(jourVente,"jourVente")
            // if (jourVente <= 07) {
            //   semaineVentes.semaine1 += prixTotal;
            // } else if ( 07<jourVente <= 14) {
            //   semaineVentes.semaine2 += prixTotal;
            // } else if (14 < jourVente <= 21) {
            //   semaineVentes.semaine3 += prixTotal;
            // } else {
            //   semaineVentes.semaine4 += prixTotal;
            // }

           

          // Calculer le bÃ©nÃ©fice total
          const beneficeVente = quantiteVendue * beneficeParBouteille;
          totalBenefice += beneficeVente;
        });
      });
      
      console.log("Total prix : ", totalPrix);
      console.log("Total bÃ©nÃ©fice : ", totalBenefice);
      console.log("Ventes par semaine : ", semaineVentes);
      data ={
        totalBenefice,
        totalPrix
      }
      socket.emit('saved' ,data);
    } else {
      socket.emit('bad');
    }
  });
});

server.listen(port, console.log(' le serveur ecoute sur le port', port));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
