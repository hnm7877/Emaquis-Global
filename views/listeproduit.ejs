<!DOCTYPE html>
<html lang="zxx">
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />

  <head>
    <!-- Google tag (gtag.js) -->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-NT2SW8WBHT"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-NT2SW8WBHT");
    </script>
    <!-- End Google tag (gtag.js) -->
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <script src="assets/js/jquery.min.js"></script>

    <title>E-maquis Admin</title>
    <!-- App css -->
    <link
      href="assets/css/bootstrap.min.css"
      rel="stylesheet"
      type="text/css"
    />
    <link href="assets/css/icons.min.css" rel="stylesheet" type="text/css" />
    <link href="assets/css/theme.min.css" rel="stylesheet" type="text/css" />
    <link href="assets/css/style.css" rel="stylesheet" type="text/css" />

    <script src="js/confetti.js"></script>
    <%- include('partial/head.ejs') %>

    <!-- PLUGINS CSS STYLE -->

    <link rel="stylesheet" href="../css/bootstrap.css" />
  </head>

  <body class="crm_body_bg">
    <style>
      .sidebar .logo .large_logo img {
        width: 70%;
        margin-left: 15%;
      }

      #status_btnn {
        display: inline-block;
        padding: 2px 15px;
        font-size: 11px;
        font-weight: 300;
        color: #fff !important;
        background: #ff9409;
        -webkit-border-radius: 30px;
        -moz-border-radius: 30px;
        border-radius: 30px;
        text-transform: capitalize;
        white-space: nowrap;
        min-width: 70px;
        text-align: center;
      }

      .lms_checkbox_1 input:checked + .slider-check:before {
        transform: translateX(20px);
        background: #2eec1c;
      }

      .dataTables_scrollBody table thead {
        display: none;
      }

      @media screen and (max-width: 765px) {
        td button.btn {
          font-size: 10px;
          margin-bottom: 5px;
          width: 100%;
        }
      }
    </style>

    <!-- react js -->

    <%- include('partial/reactScript.ejs') %>

    <!--  -->

    <%- include(user.role ===
    "Barman"?'partial/emsidebar.ejs':'partial/newSideBar.ejs') %>

    <!--/ sidebar  -->

    <section class="main_content dashboard_part large_header_bg">
      <!-- menu  -->
      <%- include('partial/newHead.ejs') %>

      <div id="root"></div>

      <div class="footer_part">
        <div class="container-fluid">
          <div class="row">
            <div class="col-lg-12">
              <div class="footer_iner text-center">
                <p>
                  2023 © E-MAQUIS - Designed by
                  <a href="#"> <i class="ti-gun"></i> </a><a href="#"> HNM</a> -
                  <a href="/faq">FAQ</a>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <div class="menu-overlay"></div>
    <!--/### CHAT_MESSAGE_BOX  ### -->
    <div id="back-top" style="display: none">
      <a title="Go to Top" href="#">
        <i class="ti-angle-up"></i>
      </a>
    </div>
    <!-- footer  -->
    <!-- footer  -->
    <!-- jquery slim -->
    <%- include('partial/script.ejs') %>

    <script type="text/babel">
      const AppContext = React.createContext();

      const ListProduits = () => {
        const { handleSelectProduct, products } = React.useContext(AppContext);
        const employee = <%- JSON.stringify(user) %>;
        const [quantities, setQuantities] = React.useState(
          products.reduce((acc, product) => {
            acc[product._id] = product.quantite;
            return acc;
          }, {})
        );

        const handleEdit = (productId) => {

          window.location.href = `/editproduit?productId=${productId}`;
        };

        const handleOpenModal = (product) => {
          handleSelectProduct(product);
        };

        const handleQuantityChange = (productId, newQuantity) => {
          setQuantities((prevQuantities) => ({
            ...prevQuantities,
            [productId]: newQuantity,
          }));
        };

        const totalPrixVente = products.reduce((total, el) => {
          return total + el.prix_vente * (quantities[el._id] || el.quantite);
        }, 0);

        return (
          <tbody>
            <tr>
              <td colspan="7">
                <p>Reste à vendre: <button className=" animationTotalPriceBorder"> {totalPrixVente} FCFA</button></p>

              </td>
            </tr>
            {products.map((el, prodId) => {
              return (
                <tr key={prodId}>
                                               <td>{el.produit.nom_produit}</td>
                                               <td style={{
                                                 maxWidth: '200px',
                                               }}>{el.produit.categorie.nom}</td>
                                               <td>{el.taille}</td>
                                               <td>{el.prix_vente}</td>

                                               <td>{el.is_cocktail ? '∞': el.quantite}</td>
                                               <td>
                                                 <img
                                                   src={el.produit.image}
                                                   alt=''
                                                   width='100px'
                                                   height='100px'
                                                   style={{
                                                     objectFit: 'contain',
                                                   }}
                                                 />
                                               </td>
                                               <td className="product_btns">
                                                 {employee.role !== 'Barman' && (
                                                   <button onClick={()=>handleEdit(el._id)} className='btn btn-success mr-1'>Modifier</button>
                                                 )}

                                                 <button onClick={()=>handleOpenModal(el)} className='btn btn-info mr-1' data-toggle="modal" data-target="#myModal" >historiques</button>

                                                 {employee.role !== 'Barman' && (
                                                   <button onClick={()=>handleOpenModal(el)} className='btn btn-danger' data-toggle="modal" data-target="#deleteModal">Supprimer</button>
                                                 )}
                                               </td>
                                             </tr>
                                           );
                                         })}
                                       </tbody>
                                     );
                                   };


                                   const ModalHistoriques = ()=>{

                                     const {productSelected} = React.useContext(AppContext);




                                     return  <div
                               className="modal fade"
                               id="myModal"
                               tabindex="-1"
                               role="dialog"
                               aria-labelledby="myModalTitle"
                             >
                               <div className="modal-dialog modal-dialog-centered" style={{
                                 maxWidth: '600px',
                               }} role="document">
                               {!!productSelected && productSelected.produit &&  <div className="modal-content">
                                   <div className="modal-header">
                                     <h2 className="modal-title" id="exampleModalLongTitle">
                                    Historiques des modifications
                                     </h2>
                                     <button
                                       type="button"
                                       className="close close-modal"
                                       data-dismiss="modal"
                                       aria-label="Close"
                                       id="close-modal"
                                     >
                                       <span aria-hidden="true">&times;</span>
                                     </button>
                                   </div>
                                   <div className="modal-body">
                                     <h4> {productSelected.produit.nom_produit} {productSelected.taille}</h4>
                                     {productSelected.historiques && productSelected.historiques.reverse().map((el, index)=>{
                                       return <p key={index}>{el.add_by} a {el.update?`modifiée la quantité de ${el.prev_quantite} à ${el.stockType === "locker"?`${el.lockerQty} casier(s) de ${el.quantite} bouteilles`:el.quantite}`:`ajoutée ${el.stockType === "locker"?`${el.lockerQty} casier(s) de ${el.quantite} bouteilles`:`${el.quantite} quantité(s)`}`} le {new Date(el.date).toLocaleDateString('fr-FR',{
                                         year: 'numeric',
                                         month: 'long',
                                         day: 'numeric',
                                         hour: 'numeric',
                                         minute: 'numeric',
                                         second: 'numeric',
                                       })}</p>
                                     })
                                   }

                                     </div>

                                   <div className="modal-footer">
                                     <button
                                       type="button"
                                       className="btn btn-success close-modal"
                                       data-dismiss="modal"
                                     >
                                       Ok
                                     </button>
                                   </div>
                                 </div>}
                               </div>
                             </div>

                                   }


      const ModalDelete = ()=>{

           const {productSelected,handleRemoveProduct} = React.useContext(AppContext);
           const [loading, setLoading] = React.useState(false);



           const handleDelete =  ()=>{

            setLoading(true)



            fetch('/deleteproduit/'+productSelected._id, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
            })
              .then((res) => res.json())
              .then((data) => {
                $('.close-modal').each(function () {

                $(this).trigger('click');
                  });
                setLoading(false)
                handleRemoveProduct(productSelected._id)


            })
           }










           return  <div
           className="modal fade"
           id="deleteModal"
           tabindex="-1"
           role="dialog"
           aria-labelledby="myModalDeleteTitle"
           >
           <div className="modal-dialog modal-dialog-centered" style={{
           maxWidth: '600px',
           }} role="document">
           {!!productSelected && productSelected.produit &&  <div className="modal-content">
           <div className="modal-header">
           <h2 className="modal-title" id="exampleModalLongTitle">
          Suppression du produit
           </h2>
           <button
             type="button"
             className="close close-modal"
             data-dismiss="modal"
             aria-label="Close"
             id="close-delete-modal"
           >
             <span aria-hidden="true">&times;</span>
           </button>
           </div>
           <div className="modal-body">
           <h4> Voulez-vous supprimer le produit {productSelected.produit.nom_produit} {productSelected.taille} ?</h4>
           </div>

           <div className="modal-footer">

           <button
             type="button"
             className="btn btn-danger close-modal"
             onClick={handleDelete}
             disabled={loading}
           >
             {loading?'Suppression en cours...':'Oui'}
           </button>
           <button
             type="button"
             className="btn btn-success close-modal"
             data-dismiss="modal"
           >
             Non
           </button>
           </div>

           </div>}
           </div>
           </div>

           }


                             const App = ()=>{
                               return <React.Fragment>
                               <div className="main_content_iner">
                               <div className="container-fluid p-0">
                                 <div className="row justify-content-center">
                                   <div className="col-lg-12">
                                     <div className="white_card card_height_100 mb_30">
                                       <div className="white_card_header">
                                         <div className="box_header m-0">
                                           <div className="main-title">
                                             <h3 className="m-0">Liste des produits</h3>


                                           </div>
                                         </div>
                                       </div>
                                       <div className="white_card_body">
                                         <div className="QA_section">
                                           <div className="white_box_tittle list_header">
                                             <h4></h4>
                                             <%- include('partial/inputSearch.ejs') %>
                                           </div>

                                           <div className='QA_table mb_30'>
                                         <table className='table lms_table_active3'>
                                           <thead>
                                             <tr>
                                               <th scope='col'>Nom</th>
                                               <th scope='col'>Catégorie</th>
                                               <th scope='col'>Taille</th>
                                               <th scope='col'>Prix de vente</th>
                                               <th scope='col'>Quantité</th>
                                               <th scope='col'>Produit</th>
                                               <th scope='col'>Action</th>
                                             </tr>
                                           </thead>
                                           <ListProduits />
                                         </table>

                             </div>
                                         </div>
                                       </div>
                                     </div>
                                   </div>
                                 </div>
                               </div>
                             </div>
                       <ModalHistoriques />
                       <ModalDelete />

                               </React.Fragment>
                             }





                             const AppRoot = () => {

                               const [productSelected, setProductSelected] = React.useState(null);
                               const [products, setProducts] = React.useState(<%- JSON.stringify(Result) %>);

                               const handleSelectProduct = (product) => {
                                 setProductSelected(product);
                               };

                               const handleRemoveProduct = (id) => {
                                setProducts(products.filter((el) => el._id !== id));
                                setProductSelected(null);
                               };

                               return (
                                 <AppContext.Provider value={{ productSelected, handleSelectProduct,handleRemoveProduct, products }}>
                                   <App />
                                 </AppContext.Provider>
                               );
                             }

                                   ReactDOM.render(<AppRoot />, document.getElementById('root'));
    </script>

    <script src="assets/js/bootstrap.bundle.min.js"></script>
    <script src="assets/js/metismenu.min.js"></script>
    <script src="assets/js/waves.js"></script>
    <script src="assets/js/simplebar.min.js"></script>

    <!-- Morris Js-->
    <script src="../plugins/morris-js/morris.min.js"></script>
    <!-- Raphael Js-->
    <script src="../plugins/raphael/raphael.min.js"></script>

    <!-- Morris Custom Js-->
    <script src="assets/pages/dashboard-demo.js"></script>

    <!-- App js -->
    <script src="assets/js/theme.js"></script>
  </body>
</html>
